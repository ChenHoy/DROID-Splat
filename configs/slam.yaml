defaults:
 - _self_
 - mapping: gaussian.yaml
 - tracking: base.yaml
 - loop_closure: eigen.yaml
#  - data: Custom/kitchen.yaml
#  - data: TotalRecon/base.yaml
 - data: Replica/base.yaml

hydra:
  run:
    dir: outputs/${hydra.job.name}/${now:%Y-%m-%d_%H-%M-%S}
  job:
    chdir: False
    name: mono_slam

device: "cuda:0"
sync_method: strict
output_folder: ./outputs/

stride: 2
mode: "mono"  # 'mono', 'prgbd', 'rgbd'
mono_depth: "metric3d-vit_giant2" # 'zoed-nk', 'metric3d-vit_giant2', 'depthany-vitl-outdoor_left', 'depthany-vitl-indoor_left'
with_dyn: False
opt_intr: False # Optimizes additional intrinsic parameters
# TODO do we really need this?
sleep_delay: 0.01 # Sleep timer to cool off the system sometimtes

run_frontend: True # This should always be True!
run_backend: True # Global optimization
run_loop_detection: False # Loop closure detection
run_mapping: True # Rendering 
## Visualizations / GUIs
run_visualization: False
run_mapping_gui: False
show_stream: False

# Frequencies for synchronizing the different main parts of the pipeline
# In an optimal setup, the Frontend would be the bottlenck, which can run at ~20-30FPS
backend_every: 5 # Run global bundle adjustment only every k Frontend updates
mapper_every: 5 # When using the Renderer in tandem to Frontend, we can optimize over very small batches of Cameras and few iterations!

## Evaluation
evaluate: False